{"ast":null,"code":"var ListenerMethods = require('reflux-core/lib/ListenerMethods'),\n    ListenerMixin = require('./ListenerMixin'),\n    _ = require('reflux-core/lib/utils');\n\nmodule.exports = function (listenable, key, filterFunc) {\n  _.throwIf(_.isFunction(key), 'Reflux.connectFilter() requires a key.');\n\n  return {\n    getInitialState: function () {\n      if (!_.isFunction(listenable.getInitialState)) {\n        return {};\n      } // Filter initial payload from store.\n\n\n      var result = filterFunc.call(this, listenable.getInitialState());\n\n      if (typeof result !== 'undefined') {\n        return _.object([key], [result]);\n      } else {\n        return {};\n      }\n    },\n    componentDidMount: function () {\n      var me = this;\n\n      _.extend(this, ListenerMethods);\n\n      this.listenTo(listenable, function (value) {\n        var result = filterFunc.call(me, value);\n        me.setState(_.object([key], [result]));\n      });\n    },\n    componentWillUnmount: ListenerMixin.componentWillUnmount\n  };\n};","map":{"version":3,"sources":["/home/tudor/work/sd/project/frontend/node_modules/reflux/src/connectFilter.js"],"names":["ListenerMethods","require","ListenerMixin","_","module","exports","listenable","key","filterFunc","throwIf","isFunction","getInitialState","result","call","object","componentDidMount","me","extend","listenTo","value","setState","componentWillUnmount"],"mappings":"AAAA,IAAIA,eAAe,GAAGC,OAAO,CAAC,iCAAD,CAA7B;AAAA,IACIC,aAAa,GAAGD,OAAO,CAAC,iBAAD,CAD3B;AAAA,IAEIE,CAAC,GAAGF,OAAO,CAAC,uBAAD,CAFf;;AAIAG,MAAM,CAACC,OAAP,GAAiB,UAASC,UAAT,EAAqBC,GAArB,EAA0BC,UAA1B,EAAsC;AAEnDL,EAAAA,CAAC,CAACM,OAAF,CAAUN,CAAC,CAACO,UAAF,CAAaH,GAAb,CAAV,EAA6B,wCAA7B;;AAEA,SAAO;AACHI,IAAAA,eAAe,EAAE,YAAW;AACxB,UAAI,CAACR,CAAC,CAACO,UAAF,CAAaJ,UAAU,CAACK,eAAxB,CAAL,EAA+C;AAC3C,eAAO,EAAP;AACH,OAHuB,CAKxB;;;AACA,UAAIC,MAAM,GAAGJ,UAAU,CAACK,IAAX,CAAgB,IAAhB,EAAsBP,UAAU,CAACK,eAAX,EAAtB,CAAb;;AACA,UAAI,OAAOC,MAAP,KAAmB,WAAvB,EAAoC;AAChC,eAAOT,CAAC,CAACW,MAAF,CAAS,CAACP,GAAD,CAAT,EAAgB,CAACK,MAAD,CAAhB,CAAP;AACH,OAFD,MAEO;AACH,eAAO,EAAP;AACH;AACJ,KAbE;AAcHG,IAAAA,iBAAiB,EAAE,YAAW;AAC1B,UAAIC,EAAE,GAAG,IAAT;;AAEAb,MAAAA,CAAC,CAACc,MAAF,CAAS,IAAT,EAAejB,eAAf;;AAEA,WAAKkB,QAAL,CAAcZ,UAAd,EAA0B,UAASa,KAAT,EAAgB;AACtC,YAAIP,MAAM,GAAGJ,UAAU,CAACK,IAAX,CAAgBG,EAAhB,EAAoBG,KAApB,CAAb;AACAH,QAAAA,EAAE,CAACI,QAAH,CAAYjB,CAAC,CAACW,MAAF,CAAS,CAACP,GAAD,CAAT,EAAgB,CAACK,MAAD,CAAhB,CAAZ;AACH,OAHD;AAIH,KAvBE;AAwBHS,IAAAA,oBAAoB,EAAEnB,aAAa,CAACmB;AAxBjC,GAAP;AA0BH,CA9BD","sourcesContent":["var ListenerMethods = require('reflux-core/lib/ListenerMethods'),\r\n    ListenerMixin = require('./ListenerMixin'),\r\n    _ = require('reflux-core/lib/utils');\r\n\r\nmodule.exports = function(listenable, key, filterFunc) {\r\n\r\n    _.throwIf(_.isFunction(key), 'Reflux.connectFilter() requires a key.');\r\n\r\n    return {\r\n        getInitialState: function() {\r\n            if (!_.isFunction(listenable.getInitialState)) {\r\n                return {};\r\n            }\r\n\r\n            // Filter initial payload from store.\r\n            var result = filterFunc.call(this, listenable.getInitialState());\r\n            if (typeof(result) !== 'undefined') {\r\n                return _.object([key], [result]);\r\n            } else {\r\n                return {};\r\n            }\r\n        },\r\n        componentDidMount: function() {\r\n            var me = this;\r\n\r\n            _.extend(this, ListenerMethods);\r\n\r\n            this.listenTo(listenable, function(value) {\r\n                var result = filterFunc.call(me, value);\r\n                me.setState(_.object([key], [result]));\r\n            });\r\n        },\r\n        componentWillUnmount: ListenerMixin.componentWillUnmount\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"script"}