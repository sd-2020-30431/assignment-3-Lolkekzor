{"ast":null,"code":"import Reflux from 'reflux';\nimport axios from 'axios';\nimport LoggedUserActions from '../actions/LoggedUser';\nimport GlobalRedirectActions from '../actions/GlobalRedirect';\n\nclass LoggedUserStore extends Reflux.Store {\n  constructor() {\n    super();\n    this.state = {\n      token: localStorage.getItem('token') || '',\n      logged: false,\n      username: ''\n    };\n    this.listenTo(LoggedUserActions.login, this.login);\n  }\n\n  login(user) {\n    console.log(\"LOGIN METHOD CALLED\");\n    console.log(user.username);\n\n    if (this.state.token === '') {\n      console.log(\"TOKEN NOT SET\");\n      axios.post('http://localhost:8000/token-auth/', JSON.stringify({\n        username: user.username,\n        password: user.password\n      }), {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(res => {\n        console.log(res);\n        res = res.data;\n        this.setState({\n          logged: true,\n          username: user.username,\n          token: res.token\n        });\n        localStorage.setItem('token', res.token);\n        GlobalRedirectActions.redirect('/');\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n\n    console.log(this.state);\n  }\n\n}\n\nexport default LoggedUserStore;","map":{"version":3,"sources":["/home/tudor/work/sd/project/frontend/src/reflux/stores/LoggedUser.js"],"names":["Reflux","axios","LoggedUserActions","GlobalRedirectActions","LoggedUserStore","Store","constructor","state","token","localStorage","getItem","logged","username","listenTo","login","user","console","log","post","JSON","stringify","password","headers","then","res","data","setState","setItem","redirect","catch","err"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,iBAAP,MAA8B,uBAA9B;AACA,OAAOC,qBAAP,MAAkC,2BAAlC;;AAEA,MAAMC,eAAN,SAA8BJ,MAAM,CAACK,KAArC,CAA2C;AACvCC,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiC,EAD/B;AAETC,MAAAA,MAAM,EAAE,KAFC;AAGTC,MAAAA,QAAQ,EAAE;AAHD,KAAb;AAOA,SAAKC,QAAL,CAAcX,iBAAiB,CAACY,KAAhC,EAAuC,KAAKA,KAA5C;AACH;;AAEDA,EAAAA,KAAK,CAACC,IAAD,EAAO;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACH,QAAjB;;AACA,QAAI,KAAKL,KAAL,CAAWC,KAAX,KAAqB,EAAzB,EAA6B;AACzBQ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAhB,MAAAA,KAAK,CAACiB,IAAN,CAAW,mCAAX,EAAgDC,IAAI,CAACC,SAAL,CAAe;AAC3DR,QAAAA,QAAQ,EAAEG,IAAI,CAACH,QAD4C;AAE3DS,QAAAA,QAAQ,EAAEN,IAAI,CAACM;AAF4C,OAAf,CAAhD,EAGI;AACAC,QAAAA,OAAO,EAAE;AAAC,0BAAgB;AAAjB;AADT,OAHJ,EAKGC,IALH,CAKQC,GAAG,IAAI;AACXR,QAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACAA,QAAAA,GAAG,GAAGA,GAAG,CAACC,IAAV;AACA,aAAKC,QAAL,CAAc;AACVf,UAAAA,MAAM,EAAE,IADE;AAEVC,UAAAA,QAAQ,EAAEG,IAAI,CAACH,QAFL;AAGVJ,UAAAA,KAAK,EAAEgB,GAAG,CAAChB;AAHD,SAAd;AAKAC,QAAAA,YAAY,CAACkB,OAAb,CAAqB,OAArB,EAA8BH,GAAG,CAAChB,KAAlC;AACAL,QAAAA,qBAAqB,CAACyB,QAAtB,CAA+B,GAA/B;AACH,OAfD,EAeGC,KAfH,CAeSC,GAAG,IAAI;AACZd,QAAAA,OAAO,CAACC,GAAR,CAAYa,GAAZ;AACH,OAjBD;AAkBH;;AAGDd,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAjB;AACH;;AAxCsC;;AA2C3C,eAAeH,eAAf","sourcesContent":["import Reflux from 'reflux';\nimport axios from 'axios';\n\nimport LoggedUserActions from '../actions/LoggedUser';\nimport GlobalRedirectActions from '../actions/GlobalRedirect';\n\nclass LoggedUserStore extends Reflux.Store {\n    constructor() {\n        super();\n        this.state = {\n            token: localStorage.getItem('token') || '',\n            logged: false,\n            username: ''\n        }\n\n\n        this.listenTo(LoggedUserActions.login, this.login);\n    }\n\n    login(user) {\n        console.log(\"LOGIN METHOD CALLED\");\n        console.log(user.username);\n        if (this.state.token === '') {\n            console.log(\"TOKEN NOT SET\");\n            axios.post('http://localhost:8000/token-auth/', JSON.stringify({\n                username: user.username,\n                password: user.password\n            }), {\n                headers: {\"Content-Type\": \"application/json\"}\n            }).then(res => {\n                console.log(res);\n                res = res.data;\n                this.setState({\n                    logged: true,\n                    username: user.username,\n                    token: res.token\n                })\n                localStorage.setItem('token', res.token);\n                GlobalRedirectActions.redirect('/');\n            }).catch(err => {\n                console.log(err);\n            })\n        }\n\n\n        console.log(this.state);\n    }\n}\n\nexport default LoggedUserStore;\n"]},"metadata":{},"sourceType":"module"}