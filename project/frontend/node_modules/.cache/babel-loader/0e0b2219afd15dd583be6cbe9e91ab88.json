{"ast":null,"code":"var _jsxFileName = \"/home/tudor/work/sd/project/frontend/src/views/LoginForm.js\";\nimport React from 'react';\nimport Reflux from 'reflux';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { Form, Row, Button } from 'react-bootstrap';\nimport './LoginForm.css';\nimport LoggedUserStore from '../reflux/stores/LoggedUser';\nimport LoggedUserActions from '../reflux/actions/LoggedUser';\nconst schema = yup.object({\n  username: yup.string().required(\"Please enter an username\").min(3, \"Username must be at least 3 characters long\"),\n  password: yup.string().required(\"Please enter a password\").min(8, \"Password is too short, must be at least 8 characters\")\n});\n\nclass LoginForm extends Reflux.Component {\n  constructor(props) {\n    super(props);\n\n    this.testFunction = user => {\n      console.log(\"HANDLE LOG IN\");\n      LoggedUserActions.login(user);\n    };\n\n    this.store = LoggedUserStore;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }\n    }, \"Log In\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Formik, {\n      validationSchema: schema,\n      onSubmit: this.testFunction,\n      initialValues: {\n        username: '',\n        password: ''\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }\n    }, ({\n      handleSubmit,\n      handleChange,\n      handleBlur,\n      values,\n      touched,\n      isValid,\n      errors\n    }) => /*#__PURE__*/React.createElement(Form, {\n      noValidate: true,\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      className: \"form-group\",\n      as: Row,\n      controlId: \"username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 33\n      }\n    }, \" Username \"), /*#__PURE__*/React.createElement(Form.Control, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"username\",\n      value: values.username,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      isValid: touched.username && !errors.username,\n      isInvalid: !!errors.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n      type: \"invalid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 33\n      }\n    }, errors.username)), /*#__PURE__*/React.createElement(Form.Group, {\n      className: \"form-group\",\n      as: Row,\n      controlId: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 33\n      }\n    }, \" Password \"), /*#__PURE__*/React.createElement(Form.Control, {\n      className: \"form-control\",\n      type: \"password\",\n      name: \"password\",\n      value: values.password,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      isValid: touched.password && !errors.password,\n      isInvalid: !!errors.password,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n      type: \"invalid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 33\n      }\n    }, errors.password)), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      className: \"btn btn-primary btn-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 29\n      }\n    }, \"Submit\"))));\n  }\n\n}\n\nexport default LoginForm;","map":{"version":3,"sources":["/home/tudor/work/sd/project/frontend/src/views/LoginForm.js"],"names":["React","Reflux","Formik","yup","Form","Row","Button","LoggedUserStore","LoggedUserActions","schema","object","username","string","required","min","password","LoginForm","Component","constructor","props","testFunction","user","console","log","login","store","render","handleSubmit","handleChange","handleBlur","values","touched","isValid","errors"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Reflux from 'reflux';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { Form, Row, Button } from 'react-bootstrap';\n\nimport './LoginForm.css';\n\nimport LoggedUserStore from '../reflux/stores/LoggedUser';\nimport LoggedUserActions from '../reflux/actions/LoggedUser';\n\nconst schema = yup.object({\n    username: yup.string().required(\"Please enter an username\").min(3, \"Username must be at least 3 characters long\"),\n    password: yup.string().required(\"Please enter a password\").min(8, \"Password is too short, must be at least 8 characters\"),\n});\n\nclass LoginForm extends Reflux.Component{\n    constructor(props) {\n        super(props);\n\n        this.store = LoggedUserStore;\n    }\n\n    testFunction = (user) => {\n        console.log(\"HANDLE LOG IN\");\n        LoggedUserActions.login(user);\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Log In</h1>\n                <hr/>\n                <Formik\n                    validationSchema={schema}\n                    onSubmit={this.testFunction}\n                    initialValues={{\n                        username: '',\n                        password: '',\n                    }}\n                >\n                    {({\n                        handleSubmit,\n                            handleChange,\n                            handleBlur,\n                            values,\n                            touched,\n                            isValid,\n                            errors,\n                    }) => (\n                        <Form noValidate onSubmit={handleSubmit}>\n                            <Form.Group className=\"form-group\" as={Row} controlId=\"username\">\n                                <Form.Label> Username </Form.Label>\n                                <Form.Control\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    name=\"username\"\n                                    value={values.username}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    isValid={touched.username && !errors.username}\n                                    isInvalid={!!errors.username}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {errors.username}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group className=\"form-group\" as={Row} controlId=\"password\">\n                                <Form.Label> Password </Form.Label>\n                                <Form.Control\n                                    className=\"form-control\"\n                                    type=\"password\"\n                                    name=\"password\"\n                                    value={values.password}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    isValid={touched.password && !errors.password}\n                                    isInvalid={!!errors.password}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {errors.password}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <hr/>\n                            <Button type=\"submit\" className=\"btn btn-primary btn-block\">Submit</Button>\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        )\n    }\n}\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}