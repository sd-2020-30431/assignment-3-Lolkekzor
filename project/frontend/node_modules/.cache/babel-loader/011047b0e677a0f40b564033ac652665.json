{"ast":null,"code":"import Reflux from 'reflux';\nimport axios from 'axios';\nimport LoggedUserActions from '../actions/LoggedUser';\nimport GlobalRedirectActions from '../actions/GlobalRedirect';\n\nclass LoggedUserStore extends Reflux.Store {\n  constructor() {\n    super();\n    this.state = {\n      token: localStorage.getItem('token') || '',\n      logged: false,\n      username: undefined\n    };\n    this.listenTo(LoggedUserActions.login, this.login);\n    this.listenTo(LoggedUserActions.tokenAuthenticate, this.tokenAuthenticate);\n    this.tokenAuthenticate();\n  }\n\n  tokenAuthenticate() {\n    console.log(\"Authenticating...\");\n    axios.get('http://localhost:8000/core/current_user/', {\n      headers: {\n        Authorization: `JWT ${localStorage.getItem('token')}`\n      }\n    }).then(res => {\n      this.setState(prevState => {\n        return { ...prevState,\n          logged: true,\n          username: res.username\n        };\n      });\n    });\n  }\n\n  login(user) {\n    axios.post('http://localhost:8000/token-auth/', JSON.stringify({\n      username: user.username,\n      password: user.password\n    }), {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      console.log(user.username);\n      console.log(res);\n      res = res.data;\n      this.setState({\n        logged: true,\n        username: user.username,\n        token: res.token\n      });\n      localStorage.setItem('token', res.token);\n      GlobalRedirectActions.redirect('/');\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n}\n\nexport default LoggedUserStore;","map":{"version":3,"sources":["/home/tudor/work/sd/project/frontend/src/reflux/stores/LoggedUser.js"],"names":["Reflux","axios","LoggedUserActions","GlobalRedirectActions","LoggedUserStore","Store","constructor","state","token","localStorage","getItem","logged","username","undefined","listenTo","login","tokenAuthenticate","console","log","get","headers","Authorization","then","res","setState","prevState","user","post","JSON","stringify","password","data","setItem","redirect","catch","err"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,iBAAP,MAA8B,uBAA9B;AACA,OAAOC,qBAAP,MAAkC,2BAAlC;;AAEA,MAAMC,eAAN,SAA8BJ,MAAM,CAACK,KAArC,CAA2C;AACvCC,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiC,EAD/B;AAETC,MAAAA,MAAM,EAAE,KAFC;AAGTC,MAAAA,QAAQ,EAAEC;AAHD,KAAb;AAMA,SAAKC,QAAL,CAAcZ,iBAAiB,CAACa,KAAhC,EAAuC,KAAKA,KAA5C;AACA,SAAKD,QAAL,CAAcZ,iBAAiB,CAACc,iBAAhC,EAAmD,KAAKA,iBAAxD;AAEA,SAAKA,iBAAL;AACH;;AAEDA,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAjB,IAAAA,KAAK,CAACkB,GAAN,CAAU,0CAAV,EAAsD;AAClDC,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,OAAMZ,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8B;AAD/C;AADyC,KAAtD,EAIGY,IAJH,CAIQC,GAAG,IAAI;AACX,WAAKC,QAAL,CAAcC,SAAS,IAAI;AACvB,eAAO,EACH,GAAGA,SADA;AAEHd,UAAAA,MAAM,EAAE,IAFL;AAGHC,UAAAA,QAAQ,EAAEW,GAAG,CAACX;AAHX,SAAP;AAKH,OAND;AAOH,KAZD;AAaH;;AAEDG,EAAAA,KAAK,CAACW,IAAD,EAAO;AACRzB,IAAAA,KAAK,CAAC0B,IAAN,CAAW,mCAAX,EAAgDC,IAAI,CAACC,SAAL,CAAe;AAC3DjB,MAAAA,QAAQ,EAAEc,IAAI,CAACd,QAD4C;AAE3DkB,MAAAA,QAAQ,EAAEJ,IAAI,CAACI;AAF4C,KAAf,CAAhD,EAGI;AACAV,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AADT,KAHJ,EAKGE,IALH,CAKQC,GAAG,IAAI;AACXN,MAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAI,CAACd,QAAjB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACAA,MAAAA,GAAG,GAAGA,GAAG,CAACQ,IAAV;AACA,WAAKP,QAAL,CAAc;AACVb,QAAAA,MAAM,EAAE,IADE;AAEVC,QAAAA,QAAQ,EAAEc,IAAI,CAACd,QAFL;AAGVJ,QAAAA,KAAK,EAAEe,GAAG,CAACf;AAHD,OAAd;AAKAC,MAAAA,YAAY,CAACuB,OAAb,CAAqB,OAArB,EAA8BT,GAAG,CAACf,KAAlC;AACAL,MAAAA,qBAAqB,CAAC8B,QAAtB,CAA+B,GAA/B;AACH,KAhBD,EAgBGC,KAhBH,CAgBSC,GAAG,IAAI;AACZlB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,GAAZ;AACH,KAlBD;AAmBH;;AApDsC;;AAuD3C,eAAe/B,eAAf","sourcesContent":["import Reflux from 'reflux';\nimport axios from 'axios';\n\nimport LoggedUserActions from '../actions/LoggedUser';\nimport GlobalRedirectActions from '../actions/GlobalRedirect';\n\nclass LoggedUserStore extends Reflux.Store {\n    constructor() {\n        super();\n        this.state = {\n            token: localStorage.getItem('token') || '',\n            logged: false,\n            username: undefined\n        }\n\n        this.listenTo(LoggedUserActions.login, this.login);\n        this.listenTo(LoggedUserActions.tokenAuthenticate, this.tokenAuthenticate);\n\n        this.tokenAuthenticate();\n    }\n\n    tokenAuthenticate() {\n        console.log(\"Authenticating...\");\n        axios.get('http://localhost:8000/core/current_user/', {\n            headers: {\n                Authorization: `JWT ${localStorage.getItem('token')}`\n            }\n        }).then(res => {\n            this.setState(prevState => {\n                return {\n                    ...prevState,\n                    logged: true,\n                    username: res.username\n                }\n            })\n        })\n    }\n\n    login(user) {\n        axios.post('http://localhost:8000/token-auth/', JSON.stringify({\n            username: user.username,\n            password: user.password\n        }), {\n            headers: {\"Content-Type\": \"application/json\"}\n        }).then(res => {\n            console.log(user.username);\n            console.log(res);\n            res = res.data;\n            this.setState({\n                logged: true,\n                username: user.username,\n                token: res.token\n            })\n            localStorage.setItem('token', res.token);\n            GlobalRedirectActions.redirect('/');\n        }).catch(err => {\n            console.log(err);\n        })\n    }\n}\n\nexport default LoggedUserStore;\n"]},"metadata":{},"sourceType":"module"}