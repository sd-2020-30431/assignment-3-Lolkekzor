{"ast":null,"code":"var ListenerMethods = require('reflux-core/lib/ListenerMethods');\n/**\r\n * A mixin factory for a React component. Meant as a more convenient way of using the `ListenerMixin`,\r\n * without having to manually set listeners in the `componentDidMount` method.\r\n *\r\n * @param {Action|Store} listenable An Action or Store that should be\r\n *  listened to.\r\n * @param {Function|String} callback The callback to register as event handler\r\n * @param {Function|String} defaultCallback The callback to register as default handler\r\n * @returns {Object} An object to be used as a mixin, which sets up the listener for the given listenable.\r\n */\n\n\nmodule.exports = function (listenable, callback, initial) {\n  return {\n    /**\r\n     * Set up the mixin before the initial rendering occurs. Import methods from `ListenerMethods`\r\n     * and then make the call to `listenTo` with the arguments provided to the factory function\r\n     */\n    componentDidMount: function () {\n      for (var m in ListenerMethods) {\n        if (this[m] !== ListenerMethods[m]) {\n          if (this[m]) {\n            throw \"Can't have other property '\" + m + \"' when using Reflux.listenTo!\";\n          }\n\n          this[m] = ListenerMethods[m];\n        }\n      }\n\n      this.listenTo(listenable, callback, initial);\n    },\n\n    /**\r\n     * Cleans up all listener previously registered.\r\n     */\n    componentWillUnmount: ListenerMethods.stopListeningToAll\n  };\n};","map":{"version":3,"sources":["/home/tudor/work/sd/assignment-3-Lolkekzor/project/frontend/node_modules/reflux/src/listenTo.js"],"names":["ListenerMethods","require","module","exports","listenable","callback","initial","componentDidMount","m","listenTo","componentWillUnmount","stopListeningToAll"],"mappings":"AAAA,IAAIA,eAAe,GAAGC,OAAO,CAAC,iCAAD,CAA7B;AAEA;;;;;;;;;;;;AAUAC,MAAM,CAACC,OAAP,GAAiB,UAASC,UAAT,EAAoBC,QAApB,EAA6BC,OAA7B,EAAqC;AAClD,SAAO;AACH;;;;AAIAC,IAAAA,iBAAiB,EAAE,YAAW;AAC1B,WAAI,IAAIC,CAAR,IAAaR,eAAb,EAA6B;AACzB,YAAI,KAAKQ,CAAL,MAAYR,eAAe,CAACQ,CAAD,CAA/B,EAAmC;AAC/B,cAAI,KAAKA,CAAL,CAAJ,EAAY;AACR,kBAAM,gCAA8BA,CAA9B,GAAgC,+BAAtC;AACH;;AACD,eAAKA,CAAL,IAAUR,eAAe,CAACQ,CAAD,CAAzB;AACH;AACJ;;AACD,WAAKC,QAAL,CAAcL,UAAd,EAAyBC,QAAzB,EAAkCC,OAAlC;AACH,KAfE;;AAgBH;;;AAGAI,IAAAA,oBAAoB,EAAEV,eAAe,CAACW;AAnBnC,GAAP;AAqBH,CAtBD","sourcesContent":["var ListenerMethods = require('reflux-core/lib/ListenerMethods');\r\n\r\n/**\r\n * A mixin factory for a React component. Meant as a more convenient way of using the `ListenerMixin`,\r\n * without having to manually set listeners in the `componentDidMount` method.\r\n *\r\n * @param {Action|Store} listenable An Action or Store that should be\r\n *  listened to.\r\n * @param {Function|String} callback The callback to register as event handler\r\n * @param {Function|String} defaultCallback The callback to register as default handler\r\n * @returns {Object} An object to be used as a mixin, which sets up the listener for the given listenable.\r\n */\r\nmodule.exports = function(listenable,callback,initial){\r\n    return {\r\n        /**\r\n         * Set up the mixin before the initial rendering occurs. Import methods from `ListenerMethods`\r\n         * and then make the call to `listenTo` with the arguments provided to the factory function\r\n         */\r\n        componentDidMount: function() {\r\n            for(var m in ListenerMethods){\r\n                if (this[m] !== ListenerMethods[m]){\r\n                    if (this[m]){\r\n                        throw \"Can't have other property '\"+m+\"' when using Reflux.listenTo!\";\r\n                    }\r\n                    this[m] = ListenerMethods[m];\r\n                }\r\n            }\r\n            this.listenTo(listenable,callback,initial);\r\n        },\r\n        /**\r\n         * Cleans up all listener previously registered.\r\n         */\r\n        componentWillUnmount: ListenerMethods.stopListeningToAll\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"script"}