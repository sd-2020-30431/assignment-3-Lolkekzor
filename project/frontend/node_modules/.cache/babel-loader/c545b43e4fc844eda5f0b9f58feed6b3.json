{"ast":null,"code":"/* globals React: false */\nvar Reflux = require('reflux-core');\n\nReflux.defineReact = require('./defineReact'); // useful utility for ES6 work, mimics the ability to extend\n\nReflux.utils.inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(subClass, superClass);\n    } else {\n      /* jshint proto: true */\n      subClass.__proto__ = superClass;\n    }\n  }\n}; // first try to see if there's a global React var and use it\n\n\nif (typeof React !== 'undefined' && React) {\n  Reflux.defineReact(React); // otherwise we're gonna resort to 'try' stuff in case of other environments\n} else {\n  try {\n    var R = require(\"react\"); // we ignore this in browserify manually (see grunt file), so it's more of a doublecheck for in node\n\n\n    Reflux.defineReact(R);\n  } catch (e) {}\n}","map":{"version":3,"sources":["/home/tudor/work/sd/assignment-2-Lolkekzor/project/frontend/node_modules/reflux/src/addES6.js"],"names":["Reflux","require","defineReact","utils","inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","React","R","e"],"mappings":"AACA;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;;AACAD,MAAM,CAACE,WAAP,GAAqBD,OAAO,CAAC,eAAD,CAA5B,C,CAEA;;AACAD,MAAM,CAACG,KAAP,CAAaC,QAAb,GAAwB,UAASC,QAAT,EAAmBC,UAAnB,EAA+B;AACtD,MAAI,OAAOA,UAAP,KAAsB,UAAtB,IAAoCA,UAAU,KAAK,IAAvD,EAA6D;AAC5D,UAAM,IAAIC,SAAJ,CAAc,6DAA6D,OAAOD,UAAlF,CAAN;AACA;;AACDD,EAAAA,QAAQ,CAACG,SAAT,GAAqBC,MAAM,CAACC,MAAP,CAAcJ,UAAU,IAAIA,UAAU,CAACE,SAAvC,EAAkD;AACtEG,IAAAA,WAAW,EAAE;AACZC,MAAAA,KAAK,EAAEP,QADK;AAEZQ,MAAAA,UAAU,EAAE,KAFA;AAGZC,MAAAA,QAAQ,EAAE,IAHE;AAIZC,MAAAA,YAAY,EAAE;AAJF;AADyD,GAAlD,CAArB;;AAQA,MAAIT,UAAJ,EAAgB;AACf,QAAIG,MAAM,CAACO,cAAX,EAA2B;AAC1BP,MAAAA,MAAM,CAACO,cAAP,CAAsBX,QAAtB,EAAgCC,UAAhC;AACA,KAFD,MAEO;AACN;AACAD,MAAAA,QAAQ,CAACY,SAAT,GAAqBX,UAArB;AACA;AACD;AACD,CApBD,C,CAsBA;;;AACA,IAAI,OAAOY,KAAP,KAAiB,WAAjB,IAAgCA,KAApC,EAA2C;AAC1ClB,EAAAA,MAAM,CAACE,WAAP,CAAmBgB,KAAnB,EAD0C,CAE3C;AACC,CAHD,MAGO;AACN,MAAI;AACH,QAAIC,CAAC,GAAGlB,OAAO,CAAC,OAAD,CAAf,CADG,CACuB;;;AAC1BD,IAAAA,MAAM,CAACE,WAAP,CAAmBiB,CAAnB;AACA,GAHD,CAGE,OAAOC,CAAP,EAAU,CAAE;AACd","sourcesContent":["\r\n/* globals React: false */\r\n\r\nvar Reflux = require('reflux-core');\r\nReflux.defineReact = require('./defineReact');\r\n\r\n// useful utility for ES6 work, mimics the ability to extend\r\nReflux.utils.inherits = function(subClass, superClass) {\r\n\tif (typeof superClass !== \"function\" && superClass !== null) {\r\n\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\r\n\t}\r\n\tsubClass.prototype = Object.create(superClass && superClass.prototype, {\r\n\t\tconstructor: {\r\n\t\t\tvalue: subClass,\r\n\t\t\tenumerable: false,\r\n\t\t\twritable: true,\r\n\t\t\tconfigurable: true\r\n\t\t}\r\n\t});\r\n\tif (superClass) {\r\n\t\tif (Object.setPrototypeOf) {\r\n\t\t\tObject.setPrototypeOf(subClass, superClass);\r\n\t\t} else {\r\n\t\t\t/* jshint proto: true */\r\n\t\t\tsubClass.__proto__ = superClass;\r\n\t\t}\r\n\t}\r\n};\r\n\r\n// first try to see if there's a global React var and use it\r\nif (typeof React !== 'undefined' && React) {\r\n\tReflux.defineReact(React);\r\n// otherwise we're gonna resort to 'try' stuff in case of other environments\r\n} else {\r\n\ttry {\r\n\t\tvar R = require(\"react\"); // we ignore this in browserify manually (see grunt file), so it's more of a doublecheck for in node\r\n\t\tReflux.defineReact(R);\r\n\t} catch (e) {}\r\n}\r\n"]},"metadata":{},"sourceType":"script"}