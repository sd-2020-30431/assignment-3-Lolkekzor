{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStore = createStore;\n\nvar _utils = require(\"./utils\");\n\nvar _ = _interopRequireWildcard(_utils);\n\nvar _Keep = require(\"./Keep\");\n\nvar Keep = _interopRequireWildcard(_Keep);\n\nvar _mixer = require(\"./mixer\");\n\nvar _bindMethods = require(\"./bindMethods\");\n\nvar _StoreMethods = require(\"./StoreMethods\");\n\nvar StoreMethods = _interopRequireWildcard(_StoreMethods);\n\nvar _PublisherMethods = require(\"./PublisherMethods\");\n\nvar PublisherMethods = _interopRequireWildcard(_PublisherMethods);\n\nvar _ListenerMethods = require(\"./ListenerMethods\");\n\nvar ListenerMethods = _interopRequireWildcard(_ListenerMethods);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nvar allowed = {\n  preEmit: 1,\n  shouldEmit: 1\n};\n/**\r\n * Creates an event emitting Data Store. It is mixed in with functions\r\n * from the `ListenerMethods` and `PublisherMethods` mixins. `preEmit`\r\n * and `shouldEmit` may be overridden in the definition object.\r\n *\r\n * @param {Object} definition The data store object definition\r\n * @returns {Store} A data store instance\r\n */\n\nfunction createStore(definition) {\n  definition = definition || {};\n\n  for (var a in StoreMethods) {\n    if (!allowed[a] && (PublisherMethods[a] || ListenerMethods[a])) {\n      throw new Error(\"Cannot override API method \" + a + \" in Reflux.StoreMethods. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.\");\n    }\n  }\n\n  for (var d in definition) {\n    if (!allowed[d] && (PublisherMethods[d] || ListenerMethods[d])) {\n      throw new Error(\"Cannot override API method \" + d + \" in store creation. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.\");\n    }\n  }\n\n  definition = (0, _mixer.mix)(definition);\n\n  function Store() {\n    var i = 0,\n        arr;\n    this.subscriptions = [];\n    this.emitter = new _.EventEmitter();\n    this.eventLabel = \"change\";\n    (0, _bindMethods.bindMethods)(this, definition);\n\n    if (this.init && _.isFunction(this.init)) {\n      this.init();\n    }\n\n    if (this.listenables) {\n      arr = [].concat(this.listenables);\n\n      for (; i < arr.length; i++) {\n        this.listenToMany(arr[i]);\n      }\n    }\n  }\n\n  _.extend(Store.prototype, ListenerMethods, PublisherMethods, StoreMethods, definition);\n\n  var store = new Store();\n  Keep.addStore(store);\n  return store;\n}","map":{"version":3,"sources":["/home/tudor/work/sd/assignment-2-Lolkekzor/project/frontend/node_modules/reflux-core/lib/createStore.js"],"names":["Object","defineProperty","exports","value","createStore","_utils","require","_","_interopRequireWildcard","_Keep","Keep","_mixer","_bindMethods","_StoreMethods","StoreMethods","_PublisherMethods","PublisherMethods","_ListenerMethods","ListenerMethods","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","default","allowed","preEmit","shouldEmit","definition","a","Error","d","mix","Store","i","arr","subscriptions","emitter","EventEmitter","eventLabel","bindMethods","init","isFunction","listenables","concat","length","listenToMany","extend","store","addStore"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createStore = createStore;\n\nvar _utils = require(\"./utils\");\n\nvar _ = _interopRequireWildcard(_utils);\n\nvar _Keep = require(\"./Keep\");\n\nvar Keep = _interopRequireWildcard(_Keep);\n\nvar _mixer = require(\"./mixer\");\n\nvar _bindMethods = require(\"./bindMethods\");\n\nvar _StoreMethods = require(\"./StoreMethods\");\n\nvar StoreMethods = _interopRequireWildcard(_StoreMethods);\n\nvar _PublisherMethods = require(\"./PublisherMethods\");\n\nvar PublisherMethods = _interopRequireWildcard(_PublisherMethods);\n\nvar _ListenerMethods = require(\"./ListenerMethods\");\n\nvar ListenerMethods = _interopRequireWildcard(_ListenerMethods);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar allowed = { preEmit: 1, shouldEmit: 1 };\n\n/**\r\n * Creates an event emitting Data Store. It is mixed in with functions\r\n * from the `ListenerMethods` and `PublisherMethods` mixins. `preEmit`\r\n * and `shouldEmit` may be overridden in the definition object.\r\n *\r\n * @param {Object} definition The data store object definition\r\n * @returns {Store} A data store instance\r\n */\nfunction createStore(definition) {\n\n    definition = definition || {};\n\n    for (var a in StoreMethods) {\n        if (!allowed[a] && (PublisherMethods[a] || ListenerMethods[a])) {\n            throw new Error(\"Cannot override API method \" + a + \" in Reflux.StoreMethods. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.\");\n        }\n    }\n\n    for (var d in definition) {\n        if (!allowed[d] && (PublisherMethods[d] || ListenerMethods[d])) {\n            throw new Error(\"Cannot override API method \" + d + \" in store creation. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.\");\n        }\n    }\n\n    definition = (0, _mixer.mix)(definition);\n\n    function Store() {\n        var i = 0,\n            arr;\n        this.subscriptions = [];\n        this.emitter = new _.EventEmitter();\n        this.eventLabel = \"change\";\n        (0, _bindMethods.bindMethods)(this, definition);\n        if (this.init && _.isFunction(this.init)) {\n            this.init();\n        }\n        if (this.listenables) {\n            arr = [].concat(this.listenables);\n            for (; i < arr.length; i++) {\n                this.listenToMany(arr[i]);\n            }\n        }\n    }\n\n    _.extend(Store.prototype, ListenerMethods, PublisherMethods, StoreMethods, definition);\n\n    var store = new Store();\n    Keep.addStore(store);\n\n    return store;\n}"]},"metadata":{},"sourceType":"script"}