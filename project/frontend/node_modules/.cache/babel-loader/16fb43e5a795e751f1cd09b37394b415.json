{"ast":null,"code":"var ListenerMethods = require('reflux-core/lib/ListenerMethods'),\n    ListenerMixin = require('./ListenerMixin'),\n    _ = require('reflux-core/lib/utils');\n\nmodule.exports = function (listenable, key) {\n  _.throwIf(typeof key === 'undefined', 'Reflux.connect() requires a key.');\n\n  return {\n    getInitialState: function () {\n      if (!_.isFunction(listenable.getInitialState)) {\n        return {};\n      }\n\n      return _.object([key], [listenable.getInitialState()]);\n    },\n    componentDidMount: function () {\n      var me = this;\n\n      _.extend(me, ListenerMethods);\n\n      this.listenTo(listenable, function (v) {\n        me.setState(_.object([key], [v]));\n      });\n    },\n    componentWillUnmount: ListenerMixin.componentWillUnmount\n  };\n};","map":{"version":3,"sources":["/home/tudor/work/sd/project/frontend/node_modules/reflux/src/connect.js"],"names":["ListenerMethods","require","ListenerMixin","_","module","exports","listenable","key","throwIf","getInitialState","isFunction","object","componentDidMount","me","extend","listenTo","v","setState","componentWillUnmount"],"mappings":"AAAA,IAAIA,eAAe,GAAGC,OAAO,CAAC,iCAAD,CAA7B;AAAA,IACIC,aAAa,GAAGD,OAAO,CAAC,iBAAD,CAD3B;AAAA,IAEIE,CAAC,GAAGF,OAAO,CAAC,uBAAD,CAFf;;AAIAG,MAAM,CAACC,OAAP,GAAiB,UAASC,UAAT,EAAqBC,GAArB,EAA0B;AAEvCJ,EAAAA,CAAC,CAACK,OAAF,CAAU,OAAOD,GAAP,KAAgB,WAA1B,EAAuC,kCAAvC;;AAEA,SAAO;AACHE,IAAAA,eAAe,EAAE,YAAW;AACxB,UAAI,CAACN,CAAC,CAACO,UAAF,CAAaJ,UAAU,CAACG,eAAxB,CAAL,EAA+C;AAC3C,eAAO,EAAP;AACH;;AAED,aAAON,CAAC,CAACQ,MAAF,CAAS,CAACJ,GAAD,CAAT,EAAe,CAACD,UAAU,CAACG,eAAX,EAAD,CAAf,CAAP;AACH,KAPE;AAQHG,IAAAA,iBAAiB,EAAE,YAAW;AAC1B,UAAIC,EAAE,GAAG,IAAT;;AAEAV,MAAAA,CAAC,CAACW,MAAF,CAASD,EAAT,EAAab,eAAb;;AAEA,WAAKe,QAAL,CAAcT,UAAd,EAA0B,UAASU,CAAT,EAAY;AAClCH,QAAAA,EAAE,CAACI,QAAH,CAAYd,CAAC,CAACQ,MAAF,CAAS,CAACJ,GAAD,CAAT,EAAe,CAACS,CAAD,CAAf,CAAZ;AACH,OAFD;AAGH,KAhBE;AAiBHE,IAAAA,oBAAoB,EAAEhB,aAAa,CAACgB;AAjBjC,GAAP;AAmBH,CAvBD","sourcesContent":["var ListenerMethods = require('reflux-core/lib/ListenerMethods'),\r\n    ListenerMixin = require('./ListenerMixin'),\r\n    _ = require('reflux-core/lib/utils');\r\n\r\nmodule.exports = function(listenable, key) {\r\n\r\n    _.throwIf(typeof(key) === 'undefined', 'Reflux.connect() requires a key.');\r\n\r\n    return {\r\n        getInitialState: function() {\r\n            if (!_.isFunction(listenable.getInitialState)) {\r\n                return {};\r\n            }\r\n\r\n            return _.object([key],[listenable.getInitialState()]);\r\n        },\r\n        componentDidMount: function() {\r\n            var me = this;\r\n\r\n            _.extend(me, ListenerMethods);\r\n\r\n            this.listenTo(listenable, function(v) {\r\n                me.setState(_.object([key],[v]));\r\n            });\r\n        },\r\n        componentWillUnmount: ListenerMixin.componentWillUnmount\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"script"}